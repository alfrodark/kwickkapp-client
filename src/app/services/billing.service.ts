import { Injectable } from '@angular/core';
import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';
import { Billing } from '../models/billing.model';
import { Observable, map } from 'rxjs';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import { Client } from '../models/client.model';

@Injectable({
  providedIn: 'root'
})
export class BillingService {

  currentUserUid!: string;
  clientId!: string;
  billingCollection: AngularFirestoreCollection<Billing>;
  clientsCollection!: AngularFirestoreCollection<Client>;

  clients: Observable<{ id: string; userId?: string | undefined; name: string; email: string;
    phone?: string | undefined; address?: string | undefined; street?: string | undefined;
    city?: string | undefined; zip?: string | undefined; photoUrl?: string | undefined;}[]>;
  billings: Observable<{id?: string; clientId: string; invoiceNumber: string;
    amount: number; date: Date;}> | any;

    private billingId!: string;

  constructor(
    private firestore: AngularFirestore,
    private afAuth: AngularFireAuth,) {

    this.billingCollection = this.firestore.collection<Billing>('billing');
    this.billings = this.billingCollection.snapshotChanges().pipe(
      map(actions => actions.map(a => {
        const data = a.payload.doc.data() as Billing;
        const id = a.payload.doc.id;
        return { id, ...data };
      }))
    );

    this.clientsCollection = firestore.collection<Client>('clients');
    this.clients = this.clientsCollection.snapshotChanges().pipe(
      map(actions => actions.map(a => {
        const data = a.payload.doc.data() as Client;
        const id = a.payload.doc.id;
        return { id, ...data };
      }))
    );
  }

  setBillingId(billingId: string): void {
    this.billingId = billingId;
  }

  getBillingId(): string {
    return this.billingId;
  }

  getBillingsByClientId(clientId: string): Observable<Billing[]> {
    return this.firestore
      .collection<Billing>('billing', ref => ref.where('clientId', '==', clientId))
      .valueChanges();
  }

  getBilling() {
    return this.firestore.collection('billing').valueChanges();
  }

  addBilling(clientId: string, billing: Billing): Promise<void> {
    // Auto-generate invoice number (customize as needed)
    billing.invoiceNumber = this.generateInvoiceNumber();
    const billingId = this.firestore.createId();

    const billingData = { ...billing, clientId, billingId };
    return this.billingCollection.add(billingData)
    .then(() => alert('Bill added successfully'))
    .catch(error => alert(error));
  }

  addBillingWithGeneratedBillingId(clientId: string, billingData: any): Promise<void> {
    const billingCollectionRef = this.firestore.collection('billing');

    // Generate an auto-generated billingId using Firestore
    const billingId = this.firestore.createId();

    // Set the data for the autogenerated billingId
    return billingCollectionRef.doc(billingId).set({ ...billingData, billingId})
    .then(() => alert('Bill added successfully'))
    .catch(error => alert(error));
  }

  addClientWithBillingId(clientData: any, billingId: string) {
    // Add the client to the 'clients' collection with a custom Billing ID
    return this.firestore.collection('clients').doc(billingId).set(clientData)
    .then(() => alert('Bill added successfully'))
    .catch(error => alert(error));
  }

  addBillingId(clientId: string, invoiceData: any) {
    const invoiceNumber = this.generateInvoiceNumber();
    this.firestore.collection('clients').doc(clientId).collection('billing').add({
      ...invoiceData,
      clientId,
      invoiceNumber,
      createdAt: new Date(),
    }).then(() => alert('Bill added successfully'))
    .catch(error => alert(error));

  }

  private generateInvoiceNumber(): string {
    // Customize the logic for generating invoice numbers
    // For simplicity, you can use a combination of a prefix and a random number
    const prefix = 'INV';
    const randomNumber = Math.floor(Math.random() * 1000000);
    return `${prefix}-${randomNumber}`;
  }

  deleteBilling(billingId: string): Promise<void> {
    return this.firestore.collection('billing').doc(billingId).delete()
      .then(() => alert('Bill deleted successfully'))
      .catch(error => alert(error));
  }

  getBillingCollectionByClientId(clientId: string): Observable<any[]> {
    return this.firestore.collection('billing', ref => ref.where('clientId', '==', clientId)).valueChanges();
  }

  deleteBillingEntriesByClientId(clientId: string): Promise<void> {
    return this.firestore.collection('billing', ref => ref.where('clientId', '==', clientId))
      .get()
      .toPromise()
      .then(querySnapshot => {
        const batch = this.firestore.firestore.batch();
        querySnapshot!.forEach(doc => {
          batch.delete(doc.ref);
        });
        return batch.commit();
      });
  }

  getBillingCollectionByBillingId(billingId: string): Observable<any[]> {
    return this.firestore.collection('billing', ref => ref.where('billingId', '==', billingId)).valueChanges();
  }

  deleteBillingEntriesByBillingId(billingId: string): Promise<void> {
    return this.firestore.collection('billing', ref => ref.where('billingId', '==', billingId))
      .get()
      .toPromise()
      .then(querySnapshot => {
        const batch = this.firestore.firestore.batch();
        querySnapshot!.forEach(doc => {
          batch.delete(doc.ref);
        });
        return batch.commit();
      });
  }

  getBillingsForClient(clientId: string): Observable<any[]> {
    return this.firestore.collection('clients').doc(clientId).collection('billing').valueChanges();
  }

  getBillingById(clientId: string, billingId: string): Observable<any> {
    return this.firestore.collection('clients').doc(clientId).collection('billing').doc(billingId).valueChanges();
  }

  updateBilling(clientId: string, billingId: string, updatedInvoiceData: any) {
    return this.firestore.collection('clients').doc(clientId).collection('billing').doc(billingId).update(updatedInvoiceData);
  }

  deleteInvoice(clientId: string, billingId: string) {
    return this.firestore.collection('clients').doc(clientId).collection('billing').doc(billingId).delete();
  }
}
